{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\giojo\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\Development\\\\Herolo_Assign\\\\react-weather-app-master\\\\src\\\\components\\\\ForecastSelector\\\\ForecastSelector.js\";\nimport React, { useState, useEffect } from 'react';\nimport apiUtils from '../../api/apiUtils';\nimport WeatherCard from '../WeatherCard/WeatherCard';\nimport './ForecastSelector.css';\nconst days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\nfunction ForecastSelector(props) {\n  const [option, setOption] = useState('today');\n  const [forecast, setForecast] = useState([]);\n\n  const getHourlyForecast = () => {\n    let locationKey = new URLSearchParams(window.location.search);\n    locationKey = locationKey.get('locationKey');\n    fetch(`https://dataservice.accuweather.com/forecasts/v1/hourly/12hour/${locationKey}?apikey=${apiUtils.accuWeather.apiKey}&metric=true`).then(response => response.json()).then(result => {\n      let res;\n      res = result.map((hour, idx) => {\n        let time = new Date(hour.DateTime).getHours().toString();\n\n        if (time.length === 1) {\n          time = '0' + time;\n        }\n\n        return /*#__PURE__*/React.createElement(WeatherCard, {\n          key: idx,\n          day: time,\n          icon: hour.WeatherIcon,\n          maxTemp: parseInt(hour.Temperature.Value),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 28\n          }\n        });\n      });\n      setForecast(res);\n    });\n  };\n\n  const getWeekForecast = () => {\n    let res;\n    res = props.forecast.map((day, idx) => {\n      let date = new Date(day.Date);\n      return /*#__PURE__*/React.createElement(WeatherCard, {\n        key: idx,\n        day: days[date.getDay()],\n        icon: day.Day.Icon,\n        maxTemp: day.Temperature.Maximum.Value,\n        minTemp: day.Temperature.Minimum.Value,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 20\n        }\n      });\n    });\n    setForecast(res);\n  };\n\n  useEffect(() => {\n    if (option === 'today') {\n      getHourlyForecast();\n    } else if (option === 'week') {\n      getWeekForecast();\n    }\n  }, [option]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ForecastSelector\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"forecast-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: option === 'today' ? 'active' : null,\n    onClick: () => setOption('today'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  }, \"Today\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: option === 'week' ? 'active' : null,\n    onClick: () => setOption('week'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }\n  }, \"Week\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"week-forecast\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, forecast.map(card => card)));\n}\n\n;\nexport default ForecastSelector;","map":{"version":3,"sources":["C:/Users/giojo/OneDrive/Área de Trabalho/Development/Herolo_Assign/react-weather-app-master/src/components/ForecastSelector/ForecastSelector.js"],"names":["React","useState","useEffect","apiUtils","WeatherCard","days","ForecastSelector","props","option","setOption","forecast","setForecast","getHourlyForecast","locationKey","URLSearchParams","window","location","search","get","fetch","accuWeather","apiKey","then","response","json","result","res","map","hour","idx","time","Date","DateTime","getHours","toString","length","WeatherIcon","parseInt","Temperature","Value","getWeekForecast","day","date","getDay","Day","Icon","Maximum","Minimum","card"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport apiUtils from '../../api/apiUtils';\nimport WeatherCard from '../WeatherCard/WeatherCard';\nimport './ForecastSelector.css';\n\nconst days = [\n    'Sun',\n    'Mon',\n    'Tue',\n    'Wed',\n    'Thu',\n    'Fri',\n    'Sat'\n];\n\nfunction ForecastSelector(props) {\n    const [option, setOption] = useState('today');\n    const [forecast, setForecast] = useState([]);\n\n    const getHourlyForecast = () => {\n        let locationKey = new URLSearchParams(window.location.search);\n        locationKey = locationKey.get('locationKey');\n\n        fetch(`https://dataservice.accuweather.com/forecasts/v1/hourly/12hour/${ locationKey }?apikey=${ apiUtils.accuWeather.apiKey }&metric=true`)\n            .then(response => response.json())\n            .then(result => {\n                let res;\n                res = result.map((hour, idx) => {\n                    let time = new Date(hour.DateTime).getHours().toString();\n                    if(time.length === 1) { time = '0' + time }\n                    return <WeatherCard key={ idx } day={ time } icon={ hour.WeatherIcon } maxTemp={ parseInt(hour.Temperature.Value) } />\n                })\n                setForecast(res);\n            })\n    };\n\n    const getWeekForecast = () => {\n        let res;\n        res = props.forecast.map((day, idx) => {\n            let date = new Date(day.Date);\n            return <WeatherCard key={ idx } day={ days[date.getDay()] } icon={ day.Day.Icon } maxTemp={ day.Temperature.Maximum.Value } minTemp={ day.Temperature.Minimum.Value } />\n        });\n        setForecast(res);\n    };\n\n    useEffect(() => {\n        if(option === 'today') {\n            getHourlyForecast();\n        } else if(option === 'week') {\n            getWeekForecast();\n        }\n    }, [option]); // eslint-disable-line react-hooks/exhaustive-deps\n\n    return (\n        <div className='ForecastSelector'>\n            <div className='forecast-header'>\n                <button className={ option === 'today' ? 'active' : null } onClick={ () => setOption('today') }>Today</button>\n                <button className={ option === 'week' ? 'active' : null } onClick={ () => setOption('week') }>Week</button>\n            </div>\n            <div className='week-forecast'>\n                { forecast.map(card => card) }\n            </div>\n        </div>\n    );\n};\n\nexport default ForecastSelector;"]},"metadata":{},"sourceType":"module"}