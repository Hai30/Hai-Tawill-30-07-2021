{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\giojo\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\Development\\\\Herolo_Assign\\\\react-weather-app-herolo\\\\src\\\\components\\\\NightModeToggle.js\";\nimport React, { memo, useState } from 'react';\nimport Lottie from 'react-lottie-player';\nimport parseUnit from 'parse-unit';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport animationData from './animationData.json';\nimport { darkModeToggle } from '../redux/theme/themeActions';\nimport { NightModeButton, NightModeDiv } from './styles/components.styles';\n\nconst NightModeToggle = ({\n  size,\n  checked,\n  onChange,\n  speed,\n  className\n}) => {\n  const [sizeValue, sizeUnit] = parseUnit(size);\n  const [isReadyToAnimate, setReadyToAnimate] = useState(false);\n  const segmentsToPlay = checked ? [2, 50] : [51, 96];\n  const segmentToGoTo = checked ? 51 : 2;\n  const dispatch = useDispatch();\n\n  const onClickHandler = () => {\n    setReadyToAnimate(true);\n    onChange(!checked);\n    dispatch(darkModeToggle());\n  };\n\n  return /*#__PURE__*/React.createElement(NightModeButton, {\n    onClick: onClickHandler,\n    \"aria-hidden\": \"true\",\n    className: className,\n    sizeValue: sizeValue,\n    sizeUnit: sizeUnit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(NightModeDiv, {\n    sizeValue: sizeValue,\n    sizeUnit: sizeUnit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Lottie, {\n    key: \"$preventGlitches\",\n    play: isReadyToAnimate,\n    speed: speed,\n    animationData: animationData,\n    loop: false,\n    segments: segmentsToPlay,\n    goTo: segmentToGoTo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  })));\n};\n\nNightModeToggle.propTypes = {\n  size: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  checked: PropTypes.bool,\n  onChange: PropTypes.func,\n  speed: PropTypes.number,\n  className: PropTypes.string\n};\nNightModeToggle.defaultProps = {\n  size: 85,\n  checked: false,\n  onChange: nextValue => null,\n  speed: 1.3,\n  className: null\n};\n\nconst propsAreEqual = (prevProps, nextProps) => prevProps.size === nextProps.size && prevProps.checked === nextProps.checked && prevProps.speed === nextProps.speed && prevProps.className === nextProps.className;\n\nexport default memo(NightModeToggle, propsAreEqual);","map":{"version":3,"sources":["C:/Users/giojo/OneDrive/Área de Trabalho/Development/Herolo_Assign/react-weather-app-herolo/src/components/NightModeToggle.js"],"names":["React","memo","useState","Lottie","parseUnit","PropTypes","useDispatch","animationData","darkModeToggle","NightModeButton","NightModeDiv","NightModeToggle","size","checked","onChange","speed","className","sizeValue","sizeUnit","isReadyToAnimate","setReadyToAnimate","segmentsToPlay","segmentToGoTo","dispatch","onClickHandler","propTypes","oneOfType","number","string","bool","func","defaultProps","nextValue","propsAreEqual","prevProps","nextProps"],"mappings":"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","sourcesContent":["import React, { memo, useState } from 'react'\nimport Lottie from 'react-lottie-player'\nimport parseUnit from 'parse-unit'\nimport PropTypes from 'prop-types'\nimport { useDispatch } from 'react-redux'\n\nimport animationData from './animationData.json'\nimport { darkModeToggle } from '../redux/theme/themeActions'\nimport { NightModeButton, NightModeDiv } from './styles/components.styles'\n\nconst NightModeToggle = ({ size, checked, onChange, speed, className }) => {\n  const [sizeValue, sizeUnit] = parseUnit(size)\n  const [isReadyToAnimate, setReadyToAnimate] = useState(false)\n\n  const segmentsToPlay = checked ? [2, 50] : [51, 96]\n  const segmentToGoTo = checked ? 51 : 2\n\n  const dispatch = useDispatch()\n\n  const onClickHandler = () => {\n    setReadyToAnimate(true)\n    onChange(!checked)\n    dispatch(darkModeToggle())\n  }\n\n  return (\n    <NightModeButton\n      onClick={onClickHandler}\n      aria-hidden='true'\n      className={className}\n      sizeValue={sizeValue}\n      sizeUnit={sizeUnit}\n    >\n      <NightModeDiv sizeValue={sizeValue} sizeUnit={sizeUnit}>\n        <Lottie\n          key='$preventGlitches'\n          play={isReadyToAnimate}\n          speed={speed}\n          animationData={animationData}\n          loop={false}\n          segments={segmentsToPlay}\n          goTo={segmentToGoTo}\n        />\n      </NightModeDiv>\n    </NightModeButton>\n  )\n}\n\nNightModeToggle.propTypes = {\n  size: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  checked: PropTypes.bool,\n  onChange: PropTypes.func,\n  speed: PropTypes.number,\n  className: PropTypes.string,\n}\n\nNightModeToggle.defaultProps = {\n  size: 85,\n  checked: false,\n  onChange: (nextValue) => null,\n  speed: 1.3,\n  className: null,\n}\n\nconst propsAreEqual = (prevProps, nextProps) =>\n  prevProps.size === nextProps.size &&\n  prevProps.checked === nextProps.checked &&\n  prevProps.speed === nextProps.speed &&\n  prevProps.className === nextProps.className\n\nexport default memo(NightModeToggle, propsAreEqual)\n"]},"metadata":{},"sourceType":"module"}