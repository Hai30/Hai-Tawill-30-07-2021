{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\giojo\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\Development\\\\Herolo_Assign\\\\react-weather-app-master\\\\src\\\\pages\\\\HomePage.js\";\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Row, Col } from 'react-bootstrap';\nimport useGeolocation from '../components/hooks/useGeolocation';\n\nconst HomePage = () => {\n  const geolocationPosition = useGeolocation();\n  const dispatch = useDispatch();\n  const isSearch = useSelector(state => state.autoComplete.isSearch);\n  const showCityFromFavorites = useSelector(state => state.favorites.showCityFromFavorites);\n  useEffect(() => {\n    const defaultLocation = !isSearch && !showCityFromFavorites;\n    const geolocationEnabled = geolocationPosition.coords && defaultLocation;\n\n    if (geolocationEnabled) {\n      const {\n        latitude,\n        longitude\n      } = geolocationPosition.coords;\n    } else if (defaultLocation) {\n      dispatch(getWeatherRequest({\n        latitude: null,\n        longitude: null\n      }));\n    }\n  }, [dispatch, geolocationPosition.coords, isSearch, showCityFromFavorites]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n    className: \"justify-content-center text-center mx-auto mb-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(HomeJumbotron, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default HomePage;","map":{"version":3,"sources":["C:/Users/giojo/OneDrive/Área de Trabalho/Development/Herolo_Assign/react-weather-app-master/src/pages/HomePage.js"],"names":["React","useEffect","useDispatch","useSelector","Row","Col","useGeolocation","HomePage","geolocationPosition","dispatch","isSearch","state","autoComplete","showCityFromFavorites","favorites","defaultLocation","geolocationEnabled","coords","latitude","longitude","getWeatherRequest"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,GAAT,EAAcC,GAAd,QAAyB,iBAAzB;AAGA,OAAOC,cAAP,MAA2B,oCAA3B;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AACrB,QAAMC,mBAAmB,GAAGF,cAAc,EAA1C;AAEA,QAAMG,QAAQ,GAAGP,WAAW,EAA5B;AAEA,QAAMQ,QAAQ,GAAGP,WAAW,CAAEQ,KAAD,IAAWA,KAAK,CAACC,YAAN,CAAmBF,QAA/B,CAA5B;AAEA,QAAMG,qBAAqB,GAAGV,WAAW,CACtCQ,KAAD,IAAWA,KAAK,CAACG,SAAN,CAAgBD,qBADY,CAAzC;AAIAZ,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMc,eAAe,GAAG,CAACL,QAAD,IAAa,CAACG,qBAAtC;AACA,UAAMG,kBAAkB,GAAGR,mBAAmB,CAACS,MAApB,IAA8BF,eAAzD;;AAEA,QAAIC,kBAAJ,EAAwB;AACtB,YAAM;AAAEE,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,UAA0BX,mBAAmB,CAACS,MAApD;AAED,KAHD,MAGO,IAAIF,eAAJ,EAAqB;AAC1BN,MAAAA,QAAQ,CAACW,iBAAiB,CAAC;AAAEF,QAAAA,QAAQ,EAAE,IAAZ;AAAkBC,QAAAA,SAAS,EAAE;AAA7B,OAAD,CAAlB,CAAR;AACD;AACF,GAVQ,EAUN,CAACV,QAAD,EAAWD,mBAAmB,CAACS,MAA/B,EAAuCP,QAAvC,EAAiDG,qBAAjD,CAVM,CAAT;AAYA,sBACE,uDACE,oBAAC,GAAD;AAAK,IAAA,SAAS,EAAC,iDAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAC,MAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,eAME,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CADF;AAUD,CAjCD;;AAmCA,eAAeN,QAAf","sourcesContent":["import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Row, Col } from 'react-bootstrap'\n\n\nimport useGeolocation from '../components/hooks/useGeolocation'\n\nconst HomePage = () => {\n  const geolocationPosition = useGeolocation()\n\n  const dispatch = useDispatch()\n\n  const isSearch = useSelector((state) => state.autoComplete.isSearch)\n\n  const showCityFromFavorites = useSelector(\n    (state) => state.favorites.showCityFromFavorites\n  )\n\n  useEffect(() => {\n    const defaultLocation = !isSearch && !showCityFromFavorites\n    const geolocationEnabled = geolocationPosition.coords && defaultLocation\n\n    if (geolocationEnabled) {\n      const { latitude, longitude } = geolocationPosition.coords\n     \n    } else if (defaultLocation) {\n      dispatch(getWeatherRequest({ latitude: null, longitude: null }))\n    }\n  }, [dispatch, geolocationPosition.coords, isSearch, showCityFromFavorites])\n\n  return (\n    <>\n      <Row className='justify-content-center text-center mx-auto mb-5'>\n        <Col md='auto'>\n        \n        </Col>\n      </Row>\n      <HomeJumbotron />\n    </>\n  )\n}\n\nexport default HomePage\n"]},"metadata":{},"sourceType":"module"}