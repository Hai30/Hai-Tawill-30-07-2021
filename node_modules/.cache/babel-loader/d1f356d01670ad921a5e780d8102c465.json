{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\giojo\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\Development\\\\Herolo_Assign\\\\react-weather-app-herolo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import apiUtils from'../../api/apiUtils';import WeatherCard from'../WeatherCard/WeatherCard';import'./ForecastSelector.css';var days=['Sun','Mon','Tue','Wed','Thu','Fri','Sat'];function ForecastSelector(props){var _useState=useState('today'),_useState2=_slicedToArray(_useState,2),option=_useState2[0],setOption=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),forecast=_useState4[0],setForecast=_useState4[1];var getHourlyForecast=function getHourlyForecast(){var locationKey=new URLSearchParams(window.location.search);locationKey=locationKey.get('locationKey');fetch(\"https://dataservice.accuweather.com/forecasts/v1/hourly/12hour/\".concat(locationKey,\"?apikey=\").concat(apiUtils.accuWeather.apiKey,\"&metric=true\")).then(function(response){return response.json();}).then(function(result){var res;res=result.map(function(hour,idx){var time=new Date(hour.DateTime).getHours().toString();if(time.length===1){time='0'+time;}return/*#__PURE__*/React.createElement(WeatherCard,{key:idx,day:time,icon:hour.WeatherIcon,maxTemp:parseInt(hour.Temperature.Value)});});setForecast(res);});};var getWeekForecast=function getWeekForecast(){var res;res=props.forecast.map(function(day,idx){var date=new Date(day.Date);return/*#__PURE__*/React.createElement(WeatherCard,{key:idx,day:days[date.getDay()],icon:day.Day.Icon,maxTemp:day.Temperature.Maximum.Value,minTemp:day.Temperature.Minimum.Value});});setForecast(res);};useEffect(function(){if(option==='today'){getHourlyForecast();}else if(option==='week'){getWeekForecast();}},[option]);// eslint-disable-line react-hooks/exhaustive-deps\nreturn/*#__PURE__*/React.createElement(\"div\",{className:\"ForecastSelector\"},/*#__PURE__*/React.createElement(\"div\",{className:\"forecast-header\"},/*#__PURE__*/React.createElement(\"button\",{className:option==='today'?'active':null,onClick:function onClick(){return setOption('today');}},\"Today\"),/*#__PURE__*/React.createElement(\"button\",{className:option==='week'?'active':null,onClick:function onClick(){return setOption('week');}},\"Week\")),/*#__PURE__*/React.createElement(\"div\",{className:\"week-forecast\"},forecast.map(function(card){return card;})));};export default ForecastSelector;","map":{"version":3,"sources":["C:/Users/giojo/OneDrive/Área de Trabalho/Development/Herolo_Assign/react-weather-app-herolo/src/components/ForecastSelector/ForecastSelector.js"],"names":["React","useState","useEffect","apiUtils","WeatherCard","days","ForecastSelector","props","option","setOption","forecast","setForecast","getHourlyForecast","locationKey","URLSearchParams","window","location","search","get","fetch","accuWeather","apiKey","then","response","json","result","res","map","hour","idx","time","Date","DateTime","getHours","toString","length","WeatherIcon","parseInt","Temperature","Value","getWeekForecast","day","date","getDay","Day","Icon","Maximum","Minimum","card"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport apiUtils from '../../api/apiUtils';\nimport WeatherCard from '../WeatherCard/WeatherCard';\nimport './ForecastSelector.css';\n\nconst days = [\n    'Sun',\n    'Mon',\n    'Tue',\n    'Wed',\n    'Thu',\n    'Fri',\n    'Sat'\n];\n\nfunction ForecastSelector(props) {\n    const [option, setOption] = useState('today');\n    const [forecast, setForecast] = useState([]);\n\n    const getHourlyForecast = () => {\n        let locationKey = new URLSearchParams(window.location.search);\n        locationKey = locationKey.get('locationKey');\n\n        fetch(`https://dataservice.accuweather.com/forecasts/v1/hourly/12hour/${ locationKey }?apikey=${ apiUtils.accuWeather.apiKey }&metric=true`)\n            .then(response => response.json())\n            .then(result => {\n                let res;\n                res = result.map((hour, idx) => {\n                    let time = new Date(hour.DateTime).getHours().toString();\n                    if(time.length === 1) { time = '0' + time }\n                    return <WeatherCard key={ idx } day={ time } icon={ hour.WeatherIcon } maxTemp={ parseInt(hour.Temperature.Value) } />\n                })\n                setForecast(res);\n            })\n    };\n\n    const getWeekForecast = () => {\n        let res;\n        res = props.forecast.map((day, idx) => {\n            let date = new Date(day.Date);\n            return <WeatherCard key={ idx } day={ days[date.getDay()] } icon={ day.Day.Icon } maxTemp={ day.Temperature.Maximum.Value } minTemp={ day.Temperature.Minimum.Value } />\n        });\n        setForecast(res);\n    };\n\n    useEffect(() => {\n        if(option === 'today') {\n            getHourlyForecast();\n        } else if(option === 'week') {\n            getWeekForecast();\n        }\n    }, [option]); // eslint-disable-line react-hooks/exhaustive-deps\n\n    return (\n        <div className='ForecastSelector'>\n            <div className='forecast-header'>\n                <button className={ option === 'today' ? 'active' : null } onClick={ () => setOption('today') }>Today</button>\n                <button className={ option === 'week' ? 'active' : null } onClick={ () => setOption('week') }>Week</button>\n            </div>\n            <div className='week-forecast'>\n                { forecast.map(card => card) }\n            </div>\n        </div>\n    );\n};\n\nexport default ForecastSelector;"]},"metadata":{},"sourceType":"module"}